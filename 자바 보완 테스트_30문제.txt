[Java 기초 문법 (1~6)]

1. 인스턴스 생성하지 않고 사용할수 있다. 

2. 
지역변수 - 메서드 안이나 특정 스코프 안에서만 사용가능하고 휘발성
인스턴스 변수 - 인스턴스화에도 사용되고 이후에도 계속 사용 o/ 데이터 저장가능

3. 
switch 문에서 사용 가능한 타입..?
>> 특정 값 비교? 배운것 중에서는.. int, String

4. 
향상된 for문/ 값이 있는만큼 처음부터 끝까지 실행된다.
일반 for문은 까다로운 조건 범주내에서 ~

5. try- catch 로 잡아서 처리한다.

6.
public - 어디서든 사용가능
protected - 다른 패키지이지만 상속받은 자식 클래스내에서는 사용가능. 
default - 같은 패키지 내 ok
private - 그 클래스 내에서만 ok

---------------------------------------------------------------
[객체지향 프로그래밍 (OOP)]

1. 서로 관련된 필드/ 메서드를 한 클래스에 묶음 (유지보수 용이, 정보 은닉)

2. 중복 상속이 안된다. 하나만 extends  

3.
오버로딩 - 같은 클래스에서 같은 기능의 메서드지만  타입/매개변수 다른 것.
오버라이딩 - 상속받은 클래스에서 사용 - 부모 메서드 받아서 사용 || 수정 가능

4. 
추상 클래스(extends)
- 공통된 속성/메서드 정의 상속해서 써~  
- 필드
- 추상메서드
- 일반메서드

인터페이스(implements) 
- 기능들만 묶어논 껍데기(규칙) - 구현해서 사용
- 상수만 가능
- 추상메서드
- 디폴트 메서드
- 정적 메서드 

5. 업/다운 캐스팅

int num = Integer.valueof(30); 

Animal dog1 = new Dog();

6. 
final class - 상속 불가 클래스
final method - 오버라이딩 불가 메서드 

7. 
생성자 호출 -> 필드초기화 -> 블록 실행 순서 
1. new 클래스명() -> 내부에서 this.name = name; -> 객체 반환

8. 
this() - 자기 클래스 안에서 자기자신 참조 
super() 상속 받았을때, 부모 호출
-------------------------------------------------------------------
[컬렉션 및 제네릭 (15~18)]

1.
List - 순서 o / 중복 o
Set - 순서 x / 중복 x
Map - 키, 값 쌍으로 / 순서 보장 x
       - 키 중복 x, 값 중복 o

2. Dog, Cat class 따로 만들면 
// 같은 속성,기능을 가진 필드나 메서드 
// 즉, 동일한 코드를 여러 클래스 만들어야 하는데
// 클래스나 메서드에서 <T> 하면 어떤 타입으로도 받아서 사용 가능
// 재사용성 용이

3. 
<?>: 어떠한 객체도 올수있음.
<? extends T>: 그 객체와 그 이상의 타입 ok
<? super T>: 그 객체와 하위 타입 ok 

4. collect.(Collectors.comparator

--------------------------------------------------------------------
[예외 처리와 자바 내부 구조 (19~24)]

1. 
try - 예외날것 같은 것들을 실행하는 곳
catch - 예외나면 처리하는 곳
finally - 예외나든 안나든 상관없이 실행하는곳
exception - 예외들 모인 집합

2. 
내가 원하는 에러메세지 문구를 정해서 보여주기 위해
&& 내가 원하는 정확한 에러가 무엇인지 알수있음.

3. 
throws: 메서드 선언부에서 예외 발생시 밖으로 던져주는 역할
throw: 특정 exception 클래스로 던져져서 그것을 수행하여라 

4. 배웠었나요.? 흠흠...

5. 
(Heap) 인스턴스 생성되면 힙에 올라감
(stack) 메서드 실행되고 사라지는 곳 

6. String 은 참조 변수라서.

--------------------------------------------------------------------
[실무 응용 / Java 8+ (25~30)]

1. 
a -> ......

2. 
- 포장지 /  Null 같은거 나올 확률 있을때. 
- Optional<String> optionalstr = ...
- .orElseThrow ..?

3.
map (매개변수 값넣고 값을 변환시켜주는 역할)
filter (특정 조건에있는 값만 뽑아주는 역할)

4. 스트림 종료 할때 쓰는 무언가를 합쳐서 압축해주는 것 같았는데요.? 

5. 
stream() 에서 마지막에 종료하는 메서드, 합계 나 등등.. Map/ List로 반환..?
collect.(Collectors.toList());


6.
foreach() - 배열에 있는 값 처음부터 끝까지 하나씩 꺼내서 사용가능
for (Book book: books) {
	System.in.out(book)
}

map(매개변수 값넣고 값을 변환시켜주는 역할) ... 
